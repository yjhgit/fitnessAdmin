{"remainingRequest":"A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\src\\pages\\jianshenkecheng\\add.vue?vue&type=template&id=574bb9d3&scoped=true&","dependencies":[{"path":"A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\src\\pages\\jianshenkecheng\\add.vue","mtime":1678095433000},{"path":"A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"A:\\project\\java\\lxgym\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}